{"version":3,"sources":["components/Header/Header.module.scss","components/Footer/Footer.module.scss","components/LineChart/LineChart.module.scss","components/Header/Header.js","components/Footer/Footer.js","components/Main/Main.js","components/LineChart/LineChart.js","components/CovidData/CovidData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","classes","Footer","Main","children","Chart","props","console","log","this","LineChart","width","height","data","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","activeDot","r","PureComponent","CovidData","useState","countries","setCountries","chosenCountry","setChosenCountry","graphData","setGraphData","useEffect","getCountries","title","a","axios","get","response","options","map","country","label","Country","value","Slug","parseDateToYearAndMonth","object","date","Date","month","toLocaleString","day","getDay","getCountryGraphData","updatedGraphData","d","parsedDate","graph","components","IndicatorSeparator","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.15748409.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__3eedo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Footer\":\"Footer_Footer__3IGGq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LineChart\":\"LineChart_LineChart__1_0R_\"};","import React from 'react';\r\nimport classes from './Header.module.scss';\r\n\r\nconst Header = () =>{\r\n    return <header className={classes.Header}>\r\n      LEADERS Home Task Header\r\n    </header>\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Header","import React from 'react';\r\nimport classes from './Footer.module.scss';\r\n\r\nconst Footer = () =>{\r\n    return <footer className={classes.Footer}>\r\n      LEADERS Home Task Footer\r\n    </footer>\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Footer","import React from 'react';\r\nimport classes from './Main.module.scss'\r\n\r\nconst Main = ({children}) => {\r\n    return <main className={classes.Main}>\r\n        {children}\r\n    </main>\r\n}\r\n\r\n\r\nexport default Main;","import React, { PureComponent } from 'react';\r\nimport classes from './LineChart.module.scss';\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n} from 'recharts';\r\n\r\n\r\nexport default class Chart extends PureComponent {\r\n\r\n\r\n  constructor(props){\r\n      super();\r\n  }\r\n  render() {\r\n    console.log(this.props)\r\n    return (\r\n        <div className={classes.LineChart}>\r\n    <LineChart\r\n        width={600}\r\n        height={300}\r\n        data={this.props.data}\r\n        margin={{\r\n          top: 5, right: 30, left: 20, bottom: 5,\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"parsedDate\" />\r\n        <YAxis dataKey=\"Cases\"/>\r\n        <Tooltip />\r\n        <Legend />\r\n        <Line type=\"monotone\" dataKey=\"Cases\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n        <Line type=\"monotone\" dataKey=\"parsedDate\" stroke=\"#82ca9d\" />\r\n      </LineChart>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n","import React,{useState,useEffect} from 'react';\r\nimport classes from './CovidData.module.scss'\r\nimport Select from 'react-select'\r\nimport LineChart from './../../components/LineChart/LineChart';\r\nimport axios from 'axios';\r\n\r\nconst CovidData = () => {\r\n    const [countries,setCountries] = useState([]);\r\n    const [chosenCountry,setChosenCountry] = useState(null);\r\n    const [graphData,setGraphData] = useState({});\r\n\r\n    useEffect(()=>{\r\n        getCountries();\r\n    },[]);\r\n\r\n\r\nconst title = !chosenCountry ? <h1>Please choose a country</h1> : <h1>You chose {chosenCountry}</h1>;\r\n\r\n\r\n    const getCountries = async () => {\r\n        try {\r\n            const response = await axios.get('https://api.covid19api.com/countries');\r\n            setCountries(response.data)\r\n            \r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const options = countries.map((country) => {\r\n        return {\r\n            label:country.Country,\r\n            value:country.Slug\r\n        }\r\n    });\r\n\r\n    const parseDateToYearAndMonth = (object)=>{\r\n        if(object){\r\n            const date = new Date(object.Date),\r\n                  month = date.toLocaleString('default', { month: 'long' }),\r\n                  day = date.getDay();\r\n            return `${month} ${day}`;\r\n        }\r\n      \r\n    }\r\n\r\n    const getCountryGraphData = async (country) => {\r\n        const response = await axios.get(`https://api.covid19api.com/total/country/${country}/status/confirmed?from=2020-03-01T00:00:00Z&to=2020-04-01T00:00:00Z\r\n        `)\r\n\r\n        const updatedGraphData = response.data.map(d => {\r\n           return  {\r\n               ...d,\r\n               parsedDate: parseDateToYearAndMonth(d)\r\n           }\r\n        \r\n        })\r\n     setGraphData(updatedGraphData);\r\n\r\n    }\r\n\r\n    const getGraph = (country) => {\r\n\r\n        getCountryGraphData(country.value);\r\n        setChosenCountry(country.label)\r\n    }\r\n\r\n    const graph = chosenCountry ? <LineChart data={graphData}/> : <p>Please chose a country in order to see some data</p>\r\n\r\n    return <div className={classes.CovidData}>\r\n           {title}\r\n           <Select   components={{ IndicatorSeparator: null}}   options={options} onChange={getGraph} />\r\n           {graph}\r\n            \r\n    </div>\r\n}\r\n\r\n\r\nexport default CovidData;\r\n\r\n\r\n","import React from 'react';\nimport Header from './components/Header/Header';\nimport Footer from './components/Footer/Footer';\nimport Main from './components/Main/Main';\nimport CovidData from './components/CovidData/CovidData';\n\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Main>\n        <CovidData/>\n      </Main>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}